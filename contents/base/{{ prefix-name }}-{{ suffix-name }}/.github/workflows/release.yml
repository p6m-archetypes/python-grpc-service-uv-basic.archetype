name: Release

on:
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: example_service_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{'{'}}{ env.PYTHON_VERSION }
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{'{'}}{ env.POETRY_VERSION }
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Install dependencies
        run: |
          cd example-service-integration-tests
          poetry install --no-interaction
      
      - name: Run all tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/example_service_test
        run: |
          cd example-service-integration-tests
          poetry run pytest tests/ -v --cov=tests --cov-report=xml

  build-and-release:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{'{'}}{ github.actor }
          password: ${{'{'}}{ secrets.GITHUB_TOKEN }
      
      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{'{'}}{ github.repository }
          tags: |
            type=semver,pattern={{'{'}}{ version }
            type=semver,pattern={{'{'}}{ major }.{{'{'}}{ minor }
            type=semver,pattern={{'{'}}{ major }
            type=raw,value=latest
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{'{'}}{ steps.meta.outputs.tags }
          labels: ${{'{'}}{ steps.meta.outputs.labels }
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{'{'}}{ steps.version.outputs.version }
      
      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: ".github/changelog-config.json"
        env:
          GITHUB_TOKEN: ${{'{'}}{ secrets.GITHUB_TOKEN }
      
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{'{'}}{ github.ref_name }
          name: Release ${{'{'}}{ github.ref_name }
          body: ${{'{'}}{ steps.changelog.outputs.changelog }
          draft: false
          prerelease: false
          token: ${{'{'}}{ secrets.GITHUB_TOKEN }
      
      - name: Set up Python for package publishing
        uses: actions/setup-python@v4
        with:
          python-version: ${{'{'}}{ env.PYTHON_VERSION }
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{'{'}}{ env.POETRY_VERSION }
      
      - name: Update version in pyproject.toml files
        run: |
          # Update version in all module pyproject.toml files
          for module in example-service-proto example-service-api example-service-core example-service-persistence example-service-server example-service-client example-service-integration-tests; do
            cd $module
            poetry version ${{'{'}}{ steps.version.outputs.version }
            cd ..
          done
          
          # Update main pyproject.toml
          poetry version ${{'{'}}{ steps.version.outputs.version }
      
      - name: Build packages
        run: |
          # Build each module
          for module in example-service-proto example-service-api example-service-core example-service-persistence example-service-server example-service-client; do
            cd $module
            poetry build
            cd ..
          done
      
      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{'{'}}{ secrets.PYPI_API_TOKEN }
        run: |
          # Publish each module to PyPI
          for module in example-service-proto example-service-api example-service-core example-service-persistence example-service-server example-service-client; do
            cd $module
            poetry publish --no-interaction
            cd ..
          done